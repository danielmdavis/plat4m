{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Projects/plat4m/client/src/NewAddendum.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewAddendum(props) {\n  _s();\n  // text entry box rendered within Proposition components on YES AND, NO BUT votes.\n  // displays text box, cancel or submit buttons. closes on submit.\n  // API call for post one addendum is handled here.\n\n  let [inputText, setInputText] = useState(''); // tracks text of new addendum entry\n\n  const stateUpdater = post => {\n    // updates children in state for display without API call\n    props.allData.forEach(item => {\n      // data intensive - simplify\n      if (item.id === props.propoId) {\n        item.addenda.push(post);\n      }\n    });\n    props.updater([...props.allData]);\n  };\n  const postNew = post => {\n    fetch(`http://localhost:3001/${props.propoId}`, {\n      // post child to backend\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(post),\n      json: true\n    });\n    stateUpdater(post);\n  };\n  const handleSubmit = () => {\n    // completes and JSONifies new child, calls poster\n    if (inputText) {\n      const post = {\n        'id': props.addenda.length + 1,\n        'text': inputText,\n        'ups': 1,\n        'downs': 0,\n        'predicate': props.predicate\n      };\n      postNew(post);\n    }\n    props.handleCancel();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-addendum-entry\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: props.handleCancel,\n      children: \"\\u2715\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      multiline: true,\n      minRows: \"2\",\n      onChange: e => {\n        setInputText(e.target.value);\n      },\n      value: inputText,\n      className: \"new-addendum-textbox\",\n      style: {\n        backgroundColor: props.predicate ? 'rgb(245, 196, 213)' : 'rgb(246, 246, 246)'\n      },\n      variant: \"outlined\",\n      label: \"Propose an Addendum\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleSubmit,\n      children: \"\\u2713\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(NewAddendum, \"wAh2Cv8Kk70PfbjrJimBRYwxb6g=\");\n_c = NewAddendum;\nvar _c;\n$RefreshReg$(_c, \"NewAddendum\");","map":{"version":3,"names":["React","useState","Button","Card","TextField","NewAddendum","props","inputText","setInputText","stateUpdater","post","allData","forEach","item","id","propoId","addenda","push","updater","postNew","fetch","method","mode","headers","body","JSON","stringify","json","handleSubmit","length","predicate","handleCancel","e","target","value","backgroundColor"],"sources":["/Users/daniel/Projects/plat4m/client/src/NewAddendum.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\n\nexport default function NewAddendum(props) {\n  // text entry box rendered within Proposition components on YES AND, NO BUT votes.\n  // displays text box, cancel or submit buttons. closes on submit.\n  // API call for post one addendum is handled here.\n\n  let [inputText, setInputText] = useState('') // tracks text of new addendum entry\n\n  const stateUpdater = post => { // updates children in state for display without API call\n    props.allData.forEach(item => { // data intensive - simplify\n      if (item.id === props.propoId) { \n        item.addenda.push(post)\n    } })\n    props.updater([...props.allData])\n  }\n  const postNew = post => {\n    fetch(`http://localhost:3001/${props.propoId}`, { // post child to backend\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json'\n       },\n      body: JSON.stringify(post),\n      json: true\n    })\n    stateUpdater(post)\n  }\n\n  const handleSubmit = () => { // completes and JSONifies new child, calls poster\n    if (inputText) {\n      const post = {\n        'id': props.addenda.length + 1,\n        'text': inputText,\n        'ups': 1,\n        'downs': 0,\n        'predicate': props.predicate\n      }\n      postNew(post)  \n    }\n    props.handleCancel()\n  }\n\n  return (\n    <div className='new-addendum-entry'>\n      {/* read horizontally as button-card-button */}\n      <Button\n        variant='contained'\n        color='secondary'\n        onClick={props.handleCancel}>\n        ✕\n      </Button>\n      <TextField\n        multiline={true} minRows='2'\n        onChange={(e) => {setInputText(e.target.value)}} \n        value={inputText}\n        className='new-addendum-textbox'\n        style={{ backgroundColor: props.predicate ? 'rgb(245, 196, 213)' : 'rgb(246, 246, 246)' }}\n        variant='outlined'\n        label='Propose an Addendum'/>\n      <Button\n        variant='contained'\n        color='primary'\n        onClick={handleSubmit}>\n        ✓\n      </Button>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,SAAS,MAAM,6BAA6B;AAAC;AAEpD,eAAe,SAASC,WAAW,CAACC,KAAK,EAAE;EAAA;EACzC;EACA;EACA;;EAEA,IAAI,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,EAAC;;EAE7C,MAAMQ,YAAY,GAAGC,IAAI,IAAI;IAAE;IAC7BJ,KAAK,CAACK,OAAO,CAACC,OAAO,CAACC,IAAI,IAAI;MAAE;MAC9B,IAAIA,IAAI,CAACC,EAAE,KAAKR,KAAK,CAACS,OAAO,EAAE;QAC7BF,IAAI,CAACG,OAAO,CAACC,IAAI,CAACP,IAAI,CAAC;MAC3B;IAAE,CAAC,CAAC;IACJJ,KAAK,CAACY,OAAO,CAAC,CAAC,GAAGZ,KAAK,CAACK,OAAO,CAAC,CAAC;EACnC,CAAC;EACD,MAAMQ,OAAO,GAAGT,IAAI,IAAI;IACtBU,KAAK,CAAE,yBAAwBd,KAAK,CAACS,OAAQ,EAAC,EAAE;MAAE;MAChDM,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE;QACP,6BAA6B,EAAE,GAAG;QAClC,cAAc,EAAE;MACjB,CAAC;MACFC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChB,IAAI,CAAC;MAC1BiB,IAAI,EAAE;IACR,CAAC,CAAC;IACFlB,YAAY,CAACC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMkB,YAAY,GAAG,MAAM;IAAE;IAC3B,IAAIrB,SAAS,EAAE;MACb,MAAMG,IAAI,GAAG;QACX,IAAI,EAAEJ,KAAK,CAACU,OAAO,CAACa,MAAM,GAAG,CAAC;QAC9B,MAAM,EAAEtB,SAAS;QACjB,KAAK,EAAE,CAAC;QACR,OAAO,EAAE,CAAC;QACV,WAAW,EAAED,KAAK,CAACwB;MACrB,CAAC;MACDX,OAAO,CAACT,IAAI,CAAC;IACf;IACAJ,KAAK,CAACyB,YAAY,EAAE;EACtB,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,oBAAoB;IAAA,wBAEjC,QAAC,MAAM;MACL,OAAO,EAAC,WAAW;MACnB,KAAK,EAAC,WAAW;MACjB,OAAO,EAAEzB,KAAK,CAACyB,YAAa;MAAA,UAAC;IAE/B;MAAA;MAAA;MAAA;IAAA,QAAS,eACT,QAAC,SAAS;MACR,SAAS,EAAE,IAAK;MAAC,OAAO,EAAC,GAAG;MAC5B,QAAQ,EAAGC,CAAC,IAAK;QAACxB,YAAY,CAACwB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;MAAA,CAAE;MAChD,KAAK,EAAE3B,SAAU;MACjB,SAAS,EAAC,sBAAsB;MAChC,KAAK,EAAE;QAAE4B,eAAe,EAAE7B,KAAK,CAACwB,SAAS,GAAG,oBAAoB,GAAG;MAAqB,CAAE;MAC1F,OAAO,EAAC,UAAU;MAClB,KAAK,EAAC;IAAqB;MAAA;MAAA;MAAA;IAAA,QAAE,eAC/B,QAAC,MAAM;MACL,OAAO,EAAC,WAAW;MACnB,KAAK,EAAC,SAAS;MACf,OAAO,EAAEF,YAAa;MAAA,UAAC;IAEzB;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEV;AAAC,GAnEuBvB,WAAW;AAAA,KAAXA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}